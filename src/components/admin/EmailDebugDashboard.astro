---
// Email Debug Dashboard - Comprehensive troubleshooting interface
import { AuthDB } from '../../lib/auth/db';
import { EmailEventLogger } from '../../lib/monitoring/email-event-logger';
import type { Env } from '../../types/env';

interface Props {
  env: Env;
  authDB: AuthDB;
}

const { env, authDB } = Astro.props;
const eventLogger = new EmailEventLogger(env, authDB);

// Get recent failures for troubleshooting
const recentFailures = await eventLogger.getRecentFailures(20);

// Get performance metrics for key operations
const gmailSendMetrics = await eventLogger.getPerformanceMetrics('send', 'gmail_send_email', 24);
const authMetrics = await eventLogger.getPerformanceMetrics('auth', 'gmail_get_valid_token', 24);
const templateMetrics = await eventLogger.getPerformanceMetrics('template', 'render_template', 24);

// Get event type breakdown for last 24 hours
const eventBreakdown = await authDB.db.prepare(`
  SELECT 
    event_type,
    event_category,
    COUNT(*) as count,
    AVG(duration_ms) as avg_duration
  FROM email_events 
  WHERE timestamp >= ? 
  GROUP BY event_type, event_category
  ORDER BY count DESC
`).bind(Math.floor(Date.now() / 1000) - 86400).all();

// Get correlation IDs with failures for investigation
const failureCorrelations = await authDB.db.prepare(`
  SELECT DISTINCT 
    correlation_id,
    COUNT(*) as total_events,
    SUM(CASE WHEN event_category = 'failure' THEN 1 ELSE 0 END) as failure_count,
    MIN(timestamp) as first_event,
    MAX(timestamp) as last_event
  FROM email_events 
  WHERE timestamp >= ? AND correlation_id IS NOT NULL
  GROUP BY correlation_id
  HAVING failure_count > 0
  ORDER BY failure_count DESC, last_event DESC
  LIMIT 10
`).bind(Math.floor(Date.now() / 1000) - 86400).all();

// Format timestamp helper
function formatTimestamp(timestamp: number): string {
  return new Date(timestamp * 1000).toLocaleString();
}

// Format duration helper
function formatDuration(ms: number): string {
  if (ms < 1000) return `${ms}ms`;
  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
  return `${(ms / 60000).toFixed(1)}m`;
}
---

<div class="email-debug-dashboard">
  <div class="dashboard-header">
    <h2>Email System Debug Dashboard</h2>
    <div class="last-updated">
      Last updated: {new Date().toLocaleString()}
    </div>
  </div>

  <!-- Performance Metrics -->
  <section class="metrics-section">
    <h3>Performance Metrics (Last 24h)</h3>
    <div class="metrics-grid">
      <div class="metric-card">
        <h4>Gmail Send Operations</h4>
        <div class="metric-value">{gmailSendMetrics.totalEvents}</div>
        <div class="metric-details">
          <div>Success Rate: {gmailSendMetrics.successRate.toFixed(1)}%</div>
          <div>Avg Duration: {formatDuration(gmailSendMetrics.avgDuration)}</div>
          <div>Range: {formatDuration(gmailSendMetrics.minDuration)} - {formatDuration(gmailSendMetrics.maxDuration)}</div>
        </div>
      </div>

      <div class="metric-card">
        <h4>Authentication</h4>
        <div class="metric-value">{authMetrics.totalEvents}</div>
        <div class="metric-details">
          <div>Success Rate: {authMetrics.successRate.toFixed(1)}%</div>
          <div>Avg Duration: {formatDuration(authMetrics.avgDuration)}</div>
        </div>
      </div>

      <div class="metric-card">
        <h4>Template Rendering</h4>
        <div class="metric-value">{templateMetrics.totalEvents}</div>
        <div class="metric-details">
          <div>Success Rate: {templateMetrics.successRate.toFixed(1)}%</div>
          <div>Avg Duration: {formatDuration(templateMetrics.avgDuration)}</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Event Type Breakdown -->
  <section class="events-section">
    <h3>Event Breakdown (Last 24h)</h3>
    <div class="events-table">
      <table>
        <thead>
          <tr>
            <th>Event Type</th>
            <th>Category</th>
            <th>Count</th>
            <th>Avg Duration</th>
          </tr>
        </thead>
        <tbody>
          {eventBreakdown.results?.map((row: any) => (
            <tr class={row.event_category === 'failure' ? 'failure-row' : ''}>
              <td>{row.event_type}</td>
              <td>
                <span class={`category-badge category-${row.event_category}`}>
                  {row.event_category}
                </span>
              </td>
              <td>{row.count}</td>
              <td>{row.avg_duration ? formatDuration(row.avg_duration) : 'N/A'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </section>

  <!-- Recent Failures -->
  <section class="failures-section">
    <h3>Recent Failures</h3>
    <div class="failures-list">
      {recentFailures.map((failure: any) => (
        <div class="failure-item">
          <div class="failure-header">
            <span class="failure-type">{failure.event_type}:{failure.event_name}</span>
            <span class="failure-time">{formatTimestamp(failure.timestamp)}</span>
          </div>
          <div class="failure-details">
            <div class="failure-error">
              <strong>Error:</strong> {failure.error_message || 'Unknown error'}
            </div>
            {failure.error_category && (
              <div class="failure-category">
                <strong>Category:</strong> 
                <span class={`category-badge category-${failure.error_category}`}>
                  {failure.error_category}
                </span>
              </div>
            )}
            {failure.correlation_id && (
              <div class="failure-correlation">
                <strong>Correlation ID:</strong> 
                <code class="correlation-id">{failure.correlation_id}</code>
                <button 
                  class="trace-button"
                  onclick={`window.location.href='/admin/email-trace?correlation_id=${failure.correlation_id}'`}
                >
                  View Full Trace
                </button>
              </div>
            )}
            {failure.recipient_email && (
              <div class="failure-recipient">
                <strong>Recipient:</strong> {failure.recipient_email}
              </div>
            )}
            {failure.operation_details && (
              <details class="failure-operation-details">
                <summary>Operation Details</summary>
                <pre>{JSON.stringify(JSON.parse(failure.operation_details), null, 2)}</pre>
              </details>
            )}
          </div>
        </div>
      ))}
      {recentFailures.length === 0 && (
        <div class="no-failures">
          ‚úÖ No failures in the last 50 events - system is healthy!
        </div>
      )}
    </div>
  </section>

  <!-- Failed Operation Traces -->
  <section class="traces-section">
    <h3>Failed Operation Traces (Last 24h)</h3>
    <div class="traces-list">
      {failureCorrelations.results?.map((trace: any) => (
        <div class="trace-item">
          <div class="trace-header">
            <code class="correlation-id">{trace.correlation_id}</code>
            <div class="trace-stats">
              <span class="failure-count">{trace.failure_count} failures</span>
              <span class="total-events">/ {trace.total_events} total events</span>
            </div>
          </div>
          <div class="trace-timeline">
            <span class="trace-start">{formatTimestamp(trace.first_event)}</span>
            <span class="trace-arrow">‚Üí</span>
            <span class="trace-end">{formatTimestamp(trace.last_event)}</span>
            <span class="trace-duration">
              ({formatDuration((trace.last_event - trace.first_event) * 1000)})
            </span>
          </div>
          <div class="trace-actions">
            <button 
              class="trace-button"
              onclick={`window.location.href='/admin/email-trace?correlation_id=${trace.correlation_id}'`}
            >
              Investigate Trace
            </button>
          </div>
        </div>
      ))}
      {failureCorrelations.results?.length === 0 && (
        <div class="no-traces">
          ‚úÖ No failed operation traces - all operations completed successfully!
        </div>
      )}
    </div>
  </section>

  <!-- Quick Actions -->
  <section class="actions-section">
    <h3>Quick Actions</h3>
    <div class="actions-grid">
      <button class="action-button" onclick="location.reload()">
        üîÑ Refresh Dashboard
      </button>
      <button class="action-button" onclick="window.location.href='/admin/email-events'">
        üìä View All Events
      </button>
      <button class="action-button" onclick="window.location.href='/admin/email-performance'">
        ‚ö° Performance Analysis
      </button>
      <button class="action-button" onclick="window.location.href='/admin/test-email'">
        ‚úâÔ∏è Send Test Email
      </button>
    </div>
  </section>
</div>

<style>
  .email-debug-dashboard {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e0e0e0;
  }

  .dashboard-header h2 {
    margin: 0;
    color: #333;
  }

  .last-updated {
    color: #666;
    font-size: 14px;
  }

  .metrics-section, .events-section, .failures-section, .traces-section, .actions-section {
    margin-bottom: 40px;
  }

  .metrics-section h3, .events-section h3, .failures-section h3, .traces-section h3, .actions-section h3 {
    color: #333;
    margin-bottom: 15px;
    border-left: 4px solid #007cba;
    padding-left: 15px;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
  }

  .metric-card {
    background: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
  }

  .metric-card h4 {
    margin: 0 0 10px 0;
    color: #555;
    font-size: 16px;
  }

  .metric-value {
    font-size: 32px;
    font-weight: bold;
    color: #007cba;
    margin-bottom: 10px;
  }

  .metric-details div {
    margin: 5px 0;
    color: #666;
    font-size: 14px;
  }

  .events-table table {
    width: 100%;
    border-collapse: collapse;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .events-table th, .events-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }

  .events-table th {
    background: #f5f5f5;
    font-weight: 600;
    color: #333;
  }

  .failure-row {
    background-color: #fff5f5;
  }

  .category-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
  }

  .category-success { background: #e8f5e8; color: #2d7d32; }
  .category-failure { background: #ffebee; color: #c62828; }
  .category-attempt { background: #e3f2fd; color: #1565c0; }
  .category-retry { background: #fff3e0; color: #ef6c00; }
  .category-timeout { background: #fce4ec; color: #ad1457; }
  .category-validation { background: #f3e5f5; color: #7b1fa2; }

  .failures-list, .traces-list {
    space-y: 15px;
  }

  .failure-item, .trace-item {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
  }

  .failure-header, .trace-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }

  .failure-type {
    font-weight: 600;
    color: #c62828;
  }

  .failure-time {
    color: #666;
    font-size: 14px;
  }

  .failure-details div {
    margin: 8px 0;
    font-size: 14px;
  }

  .failure-error {
    color: #d32f2f;
  }

  .correlation-id {
    background: #f5f5f5;
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 12px;
  }

  .trace-button {
    background: #007cba;
    color: white;
    border: none;
    padding: 4px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    margin-left: 10px;
  }

  .trace-button:hover {
    background: #005a8b;
  }

  .failure-operation-details pre {
    background: #f8f8f8;
    padding: 10px;
    border-radius: 4px;
    font-size: 12px;
    overflow-x: auto;
  }

  .trace-timeline {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 10px 0;
    font-size: 14px;
    color: #666;
  }

  .trace-arrow {
    color: #999;
  }

  .trace-stats {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .failure-count {
    background: #ffebee;
    color: #c62828;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }

  .total-events {
    color: #666;
    font-size: 12px;
  }

  .no-failures, .no-traces {
    text-align: center;
    padding: 40px;
    color: #4caf50;
    font-weight: 500;
    background: #f1f8e9;
    border-radius: 8px;
  }

  .actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .action-button {
    background: #007cba;
    color: white;
    border: none;
    padding: 15px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .action-button:hover {
    background: #005a8b;
  }

  @media (max-width: 768px) {
    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
    }

    .events-table {
      overflow-x: auto;
    }
  }
</style>