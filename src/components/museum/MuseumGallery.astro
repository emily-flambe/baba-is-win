---
import type { MuseumProject } from '../../lib/github/types.js';
import ProjectCard from './ProjectCard.astro';

export interface Props {
  projects: MuseumProject[];
  layout?: 'grid' | 'masonry' | 'list';
  showSearch?: boolean;
  emptyMessage?: string;
}

const { 
  projects, 
  layout = 'grid', 
  showSearch = false,
  emptyMessage = 'No projects found matching your criteria.'
} = Astro.props;

// Projects are already sorted by the API
const allProjects = projects;
---

<div class="museum-gallery" data-layout={layout}>


  {projects.length === 0 ? (
    <div class="empty-state">
      <div class="empty-icon">üîç</div>
      <h3>No Projects Found</h3>
      <p>{emptyMessage}</p>
    </div>
  ) : (
    <div class="gallery-container">
      <section class="projects-section">
        <div class={`projects-grid ${layout}`}>
          {allProjects.map(project => (
            <ProjectCard project={project} featured={false} />
          ))}
        </div>
      </section>
    </div>
  )}
</div>

<style>
  .museum-gallery {
    width: 100%;
  }



  .gallery-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }



  /* CSS Grid Masonry Layout */
  .projects-grid {
    width: 100%;
  }

  .projects-grid.grid,
  .projects-grid.masonry {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    grid-auto-rows: 10px;
    gap: 2rem;
    align-items: start;
  }

  .projects-grid.list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .projects-grid .project-card {
    width: 100%;
    transition: all 0.3s ease;
    opacity: 1;
    break-inside: avoid;
    margin: 0;
  }

  .projects-grid.list .project-card {
    margin-bottom: 1rem;
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .empty-state h3 {
    font-family: var(--font-family-sans);
    font-size: 1.6em;
    font-weight: 700;
    margin: 0 0 0.5em 0;
    color: #a6d8df;
  }

  .empty-state p {
    font-family: var(--font-family-serif);
    font-size: 1.15rem;
    line-height: 1.75em;
    margin: 1.2em auto;
    max-width: 400px;
  }

  /* Responsive Design */
  /* Better responsive breakpoints */
  @media (max-width: 768px) {
    .projects-grid.grid,
    .projects-grid.masonry {
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
    
    @supports not (grid-template-rows: masonry) {
      .projects-grid.grid,
      .projects-grid.masonry {
        column-width: 300px;
      }
    }
  }

  @media (max-width: 640px) {
    .projects-grid.grid,
    .projects-grid.masonry {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    @supports not (grid-template-rows: masonry) {
      .projects-grid.grid,
      .projects-grid.masonry {
        column-count: 1;
        column-width: 100%;
      }
    }
    
    .projects-grid .project-card {
      margin-bottom: 1rem;
    }
  }

  @media (max-width: 768px) {

    .gallery-container {
      gap: 1.5rem;
    }

    .empty-state {
      padding: 3rem 1rem;
    }

    .empty-icon {
      font-size: 3rem;
    }
  }




</style>

<script>
  // Simple masonry layout using CSS Grid
  function initMasonry() {
    const grids = document.querySelectorAll('.projects-grid.grid, .projects-grid.masonry');
    
    grids.forEach(grid => {
      const cards = grid.querySelectorAll('.project-card');
      const rowGap = 32; // 2rem in pixels
      const rowHeight = 10; // grid-auto-rows value
      
      cards.forEach(card => {
        const cardHeight = card.getBoundingClientRect().height;
        const rowSpan = Math.ceil((cardHeight + rowGap) / (rowHeight + rowGap));
        card.style.gridRowEnd = `span ${rowSpan}`;
      });
    });
  }

  // Wait for all images to load before calculating masonry
  function waitForImages() {
    return new Promise((resolve) => {
      const images = document.querySelectorAll('.project-card img');
      if (images.length === 0) {
        resolve(undefined);
        return;
      }

      let loadedCount = 0;
      const totalImages = images.length;

      images.forEach(img => {
        if (img.complete) {
          loadedCount++;
        } else {
          img.addEventListener('load', () => {
            loadedCount++;
            if (loadedCount === totalImages) {
              resolve(undefined);
            }
          });
          img.addEventListener('error', () => {
            loadedCount++;
            if (loadedCount === totalImages) {
              resolve(undefined);
            }
          });
        }
      });

      if (loadedCount === totalImages) {
        resolve(undefined);
      }

      // Fallback timeout in case some images fail to fire events
      setTimeout(() => resolve(undefined), 2000);
    });
  }

  // Initialize masonry layout with proper image loading detection
  async function runMasonry() {
    // Wait for images to load
    await waitForImages();
    
    // Small delay to ensure DOM is settled
    setTimeout(initMasonry, 50);
  }

  // Handle initial page load
  document.addEventListener('DOMContentLoaded', runMasonry);
  
  // Handle Astro ViewTransitions navigation (key for fixing the header link issue)
  document.addEventListener('astro:page-load', runMasonry);
  
  // Handle window resize
  window.addEventListener('resize', () => {
    setTimeout(initMasonry, 100);
  });
</script>

