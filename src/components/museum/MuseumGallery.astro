---
import type { MuseumProject } from '../../lib/github/types.js';
import ProjectCard from './ProjectCard.astro';

export interface Props {
  projects: MuseumProject[];
  layout?: 'grid' | 'masonry' | 'list';
  showSearch?: boolean;
  emptyMessage?: string;
}

const { 
  projects, 
  layout = 'grid', 
  showSearch = false,
  emptyMessage = 'No projects found matching your criteria.'
} = Astro.props;

// Group projects by section
const sectionOrder = ['Applications', 'Tools', 'Nonsense'];
const projectsBySection = new Map<string, MuseumProject[]>();

// Initialize sections
sectionOrder.forEach(section => {
  projectsBySection.set(section, []);
});

// Group projects by their section
projects.forEach(project => {
  const section = project.section || 'Nonsense';
  if (!projectsBySection.has(section)) {
    projectsBySection.set(section, []);
  }
  projectsBySection.get(section)!.push(project);
});

const allProjects = projects;
---

<div class="museum-gallery" data-layout={layout}>


  {projects.length === 0 ? (
    <div class="empty-state">
      <div class="empty-icon">üîç</div>
      <h3>No Projects Found</h3>
      <p>{emptyMessage}</p>
    </div>
  ) : (
    <div class="gallery-container">
      {sectionOrder.map(section => {
        const sectionProjects = projectsBySection.get(section) || [];
        if (sectionProjects.length === 0) return null;
        
        return (
          <section class="projects-section">
            <h2 class="section-title">{section}</h2>
            <div class={`projects-grid ${layout}`}>
              {sectionProjects.map(project => (
                <ProjectCard project={project} featured={false} />
              ))}
            </div>
          </section>
        );
      })}
    </div>
  )}
</div>

<style>
  .museum-gallery {
    width: 100%;
  }



  .gallery-container {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .section-title {
    font-family: var(--font-family-serif);
    font-size: 2.5rem;
    font-weight: 700;
    color: #a6d8df;
    text-align: center;
    margin: 0 0 2rem 0;
    padding: 1rem 0;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 3px;
    background: linear-gradient(90deg, transparent, #a6d8df, transparent);
  }

  .projects-section {
    margin-bottom: 2rem;
  }



  /* CSS Grid Masonry Layout */
  .projects-grid {
    width: 100%;
  }

  .projects-grid.grid,
  .projects-grid.masonry {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    align-items: stretch;
  }
  
  /* Force 3 columns on larger screens */
  @media (min-width: 1024px) {
    .projects-grid.grid,
    .projects-grid.masonry {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .projects-grid.list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .projects-grid .project-card {
    width: 100%;
    aspect-ratio: 16 / 10;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    opacity: 1;
    margin: 0;
  }

  .projects-grid .project-card:hover {
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }

  .projects-grid.list .project-card {
    margin-bottom: 1rem;
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .empty-state h3 {
    font-family: var(--font-family-sans);
    font-size: 1.6em;
    font-weight: 700;
    margin: 0 0 0.5em 0;
    color: #a6d8df;
  }

  .empty-state p {
    font-family: var(--font-family-serif);
    font-size: 1.15rem;
    line-height: 1.75em;
    margin: 1.2em auto;
    max-width: 400px;
  }

  /* Responsive Design */
  /* Responsive breakpoints */
  @media (max-width: 768px) {
    .projects-grid.grid,
    .projects-grid.masonry {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .projects-grid.grid,
    .projects-grid.masonry {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .gallery-container {
      gap: 2rem;
    }

    .section-title {
      font-size: 2rem;
      margin-bottom: 1.5rem;
    }

    .empty-state {
      padding: 3rem 1rem;
    }

    .empty-icon {
      font-size: 3rem;
    }
  }

  @media (max-width: 480px) {
    .section-title {
      font-size: 1.75rem;
      margin-bottom: 1rem;
    }
  }




</style>

<script>
  // Handle window resize for responsive updates
  window.addEventListener('resize', () => {
    // Minimal resize handler - CSS Grid handles layout automatically
  });
</script>

