---
export interface Props {
  images: (string | { url: string; offset?: string })[];
  alt?: string;
}

const { images, alt = "Thought image" } = Astro.props;

if (!images || images.length === 0) {
  return null;
}

// Normalize images to objects with url and offset
const normalizedImages = images.map(img => {
  if (typeof img === 'string') {
    return { url: img, offset: '50%' };
  }
  return { url: img.url, offset: img.offset || '50%' };
});
---

<div class="carousel-container">
  <div class="carousel" data-carousel>
    <div class="carousel-track" data-carousel-track>
      {normalizedImages.map((image, index) => (
        <div class="carousel-slide" data-slide={index}>
          <img src={image.url} alt={`${alt} ${index + 1}`} loading="lazy" style={`object-position: center ${image.offset};`} />
        </div>
      ))}
    </div>
    
    {images.length > 1 && (
      <>
        <button class="carousel-btn carousel-btn-prev" data-carousel-btn="prev" aria-label="Previous image">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="carousel-btn carousel-btn-next" data-carousel-btn="next" aria-label="Next image">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
        
        <div class="carousel-indicators">
          {normalizedImages.map((_, index) => (
            <button 
              class="carousel-indicator" 
              data-carousel-indicator={index}
              aria-label={`Go to image ${index + 1}`}
            ></button>
          ))}
        </div>
      </>
    )}
  </div>
</div>

<style>
  .carousel-container {
    margin: 1rem 0;
    max-width: 100%;
  }

  .carousel {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    background: var(--background-body);
    border: 1px solid var(--text-secondary);
  }

  .carousel-track {
    display: flex;
    transition: transform 0.3s ease;
  }

  .carousel-slide {
    min-width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: var(--background-body);
  }

  .carousel-slide img {
    width: 100%;
    max-width: 500px;
    height: 300px;
    object-fit: cover;
    display: block;
  }

  .carousel-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
    z-index: 2;
  }

  .carousel-btn:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .carousel-btn svg {
    width: 20px;
    height: 20px;
  }

  .carousel-btn-prev {
    left: 10px;
  }

  .carousel-btn-next {
    right: 10px;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 2;
  }

  .carousel-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-indicator.active {
    background: rgba(255, 255, 255, 0.9);
    transform: scale(1.2);
  }

  .carousel-indicator:hover {
    background: rgba(255, 255, 255, 0.7);
  }

  @media (max-width: 600px) {
    .carousel-slide img {
      height: 250px;
    }
    
    .carousel-btn {
      width: 35px;
      height: 35px;
    }
    
    .carousel-btn svg {
      width: 16px;
      height: 16px;
    }
  }
</style>

<script>
  function initializeCarousels() {
    const carousels = document.querySelectorAll('[data-carousel]');
    
    carousels.forEach(carousel => {
      if (carousel.dataset.initialized === 'true') return;
      
      const track = carousel.querySelector('[data-carousel-track]');
      const slides = carousel.querySelectorAll('[data-slide]');
      const prevBtn = carousel.querySelector('[data-carousel-btn="prev"]');
      const nextBtn = carousel.querySelector('[data-carousel-btn="next"]');
      const indicators = carousel.querySelectorAll('[data-carousel-indicator]');
      
      if (!track || slides.length <= 1) return;
      
      let currentSlide = 0;
      
      function updateCarousel() {
        const translateX = -currentSlide * 100;
        track.style.transform = `translateX(${translateX}%)`;
        
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === currentSlide);
        });
      }
      
      function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length;
        updateCarousel();
      }
      
      function prevSlide() {
        currentSlide = (currentSlide - 1 + slides.length) % slides.length;
        updateCarousel();
      }
      
      function goToSlide(index) {
        currentSlide = index;
        updateCarousel();
      }
      
      if (nextBtn) nextBtn.addEventListener('click', nextSlide);
      if (prevBtn) prevBtn.addEventListener('click', prevSlide);
      
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => goToSlide(index));
      });
      
      updateCarousel();
      
      let startX = 0;
      let endX = 0;
      
      carousel.addEventListener('touchstart', e => {
        startX = e.touches[0].clientX;
      });
      
      carousel.addEventListener('touchend', e => {
        endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
        }
      });
      
      carousel.dataset.initialized = 'true';
    });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCarousels);
  } else {
    initializeCarousels();
  }
  
  setTimeout(initializeCarousels, 100);
</script>