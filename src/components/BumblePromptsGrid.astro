---
import BumblePrompts from './BumblePrompts.astro';

// Array of prompt sets that will be randomly shuffled
const promptSets = ['real', 'ai1', 'ai2', 'ai3'] as const;

// Shuffle array using Fisher-Yates algorithm
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Randomize the order of prompt sets
const shuffledSets = shuffleArray([...promptSets]);
---

<div class="bumble-widgets-container">
  {shuffledSets.map((promptSet, index) => (
    <BumblePrompts 
      promptSet={promptSet} 
      widgetId={`widget-${index + 1}`} 
    />
  ))}
</div>

<style>
  .bumble-widgets-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    max-width: 1600px;
    margin: 40px auto;
    padding: 0 20px;
  }
  
  /* Tablet view - 2x2 grid */
  @media (max-width: 1200px) {
    .bumble-widgets-container {
      grid-template-columns: repeat(2, 1fr);
      max-width: 800px;
    }
  }
  
  /* Mobile view - single column */
  @media (max-width: 600px) {
    .bumble-widgets-container {
      grid-template-columns: 1fr;
      max-width: 400px;
      padding: 0 10px;
    }
  }
  
  /* Ensure widgets take full width of their grid cell */
  .bumble-widgets-container :global(.bumble-widget) {
    max-width: 100%;
    margin: 0;
  }
</style>