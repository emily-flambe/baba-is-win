---
import type { EmailPreferences } from '../lib/auth/types';

export interface Props {
  initialPreferences?: Partial<EmailPreferences>;
  showTitle?: boolean;
}

const { initialPreferences, showTitle = true } = Astro.props;
---

<div class="email-preferences-container">
  {showTitle && <h2 class="preferences-title">Email Preferences</h2>}
  
  <form id="email-preferences-form" class="preferences-form">
    <div class="form-group">
      <label class="section-label">Choose what you'd like to receive:</label>
      <div class="checkbox-group">
        <label class="checkbox-label">
          <input 
            type="checkbox" 
            id="emailBlogUpdates" 
            name="emailBlogUpdates"
            checked={initialPreferences?.emailBlogUpdates || false}
          />
          <span class="checkbox-text">New blog posts</span>
        </label>
        <label class="checkbox-label">
          <input 
            type="checkbox" 
            id="emailThoughtUpdates" 
            name="emailThoughtUpdates"
            checked={initialPreferences?.emailThoughtUpdates || false}
          />
          <span class="checkbox-text">New thoughts</span>
        </label>
        <label class="checkbox-label">
          <input 
            type="checkbox" 
            id="emailAnnouncements" 
            name="emailAnnouncements"
            checked={initialPreferences?.emailAnnouncements || false}
          />
          <span class="checkbox-text">Announcements</span>
        </label>
      </div>
      <small class="help-text">You can change these preferences at any time.</small>
    </div>
    
    <div id="preferences-error" class="error-message"></div>
    <div id="preferences-success" class="success-message-inline"></div>
    
    <button type="submit" class="submit-btn" id="preferences-submit">
      <span class="btn-text">Save Preferences</span>
      <span class="btn-loading">Saving...</span>
    </button>
  </form>
</div>

<style>
  .email-preferences-container {
    background: #2a2b2c;
    border: 1px solid var(--text-secondary);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
  }

  .preferences-title {
    font-family: var(--font-family-sans);
    font-size: 1.5rem;
    margin: 0 0 1.5rem 0;
    color: var(--text-main);
  }

  .preferences-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .section-label {
    font-weight: 600;
    font-family: var(--font-family-sans);
    font-size: 0.875rem;
    color: var(--text-main);
    margin-bottom: 0.75rem;
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    font-weight: 400;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .checkbox-label:hover {
    opacity: 0.8;
  }

  .checkbox-label input[type="checkbox"] {
    margin: 0;
    width: auto;
    flex-shrink: 0;
    margin-top: 0.125rem;
    cursor: pointer;
  }

  .checkbox-text {
    font-size: 0.875rem;
    line-height: 1.4;
    color: var(--text-main);
  }

  .help-text {
    color: var(--text-secondary);
    font-size: 0.75rem;
    font-style: italic;
  }

  .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    display: none;
    padding: 0.5rem;
    background: rgba(220, 53, 69, 0.1);
    border-radius: 4px;
    border: 1px solid rgba(220, 53, 69, 0.3);
  }

  .error-message.show {
    display: block;
  }

  .success-message-inline {
    color: #28a745;
    font-size: 0.875rem;
    display: none;
    padding: 0.5rem;
    background: rgba(40, 167, 69, 0.1);
    border-radius: 4px;
    border: 1px solid rgba(40, 167, 69, 0.3);
  }

  .success-message-inline.show {
    display: block;
  }

  .submit-btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: opacity 0.2s ease;
    position: relative;
    min-height: 44px;
  }

  .submit-btn:hover:not(:disabled) {
    opacity: 0.9;
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .btn-loading {
    display: none;
  }

  .submit-btn.loading .btn-text {
    display: none;
  }

  .submit-btn.loading .btn-loading {
    display: inline;
  }

  @media (max-width: 480px) {
    .email-preferences-container {
      padding: 1rem;
      margin: 1rem 0;
    }

    .preferences-title {
      font-size: 1.25rem;
    }

    .checkbox-group {
      gap: 1rem;
    }

    .checkbox-text {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('email-preferences-form') as HTMLFormElement;
    const errorMessage = document.getElementById('preferences-error') as HTMLDivElement;
    const successMessage = document.getElementById('preferences-success') as HTMLDivElement;
    const submitBtn = document.getElementById('preferences-submit') as HTMLButtonElement;

    if (!form || !errorMessage || !successMessage || !submitBtn) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Clear previous messages
      errorMessage.textContent = '';
      errorMessage.classList.remove('show');
      successMessage.textContent = '';
      successMessage.classList.remove('show');
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.classList.add('loading');

      const formData = new FormData(form);
      const data = {
        emailBlogUpdates: formData.get('emailBlogUpdates') === 'on',
        emailThoughtUpdates: formData.get('emailThoughtUpdates') === 'on',
        emailAnnouncements: formData.get('emailAnnouncements') === 'on'
      };

      try {
        const response = await fetch('/api/user/preferences', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Failed to save preferences');
        }

        // Show success message
        successMessage.textContent = 'Preferences saved successfully!';
        successMessage.classList.add('show');
        
        // Hide success message after 3 seconds
        setTimeout(() => {
          successMessage.classList.remove('show');
        }, 3000);

      } catch (error) {
        errorMessage.textContent = error instanceof Error ? error.message : 'Failed to save preferences';
        errorMessage.classList.add('show');
      } finally {
        // Reset loading state
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
      }
    });
  });
</script>