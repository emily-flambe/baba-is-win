---
import Logo from './Logo.astro'
import Nav from './Nav.astro'
import subtitlesData from '../data/subtitles.json'

const { current = '' } = Astro.props;
const user = Astro.locals?.user || null;

// Select a random subtitle
const randomIndex = Math.floor(Math.random() * subtitlesData.subtitles.length);
const selectedSubtitle = subtitlesData.subtitles[randomIndex];

// Function to render subtitle with links
function renderSubtitleHTML(subtitle) {
  let html = subtitle.text;
  
  // Replace link placeholders
  subtitle.links.forEach(link => {
    const linkHTML = `<a href="${link.url}"${link.target ? ` target="${link.target}"` : ''}>${link.text}</a>`;
    html = html.replace(link.text, linkHTML);
  });
  
  return html;
}

const subtitleHTML = renderSubtitleHTML(selectedSubtitle);
---

<style>
  header {
    display: flex;
    align-items: center; /* Align items vertically */
    justify-content: space-between; /* Space out items */
    margin: 0 auto;
    max-width: 1400px;
    padding: 2em;
    width: 100%;
  }

  .logo-title {
    display: flex;
    align-items: center;
    gap: 5em;
  }

  .site-title {
    font-size: 3em;
    font-weight: bold;
    color: var(--text-heading);
    text-decoration: none;
  }

  .site-subheader {
    font-size: 0.9em;
    font-style: italic;
    color: var(--text-muted);
    margin-top: 0.5em;
  }

  .site-subheader a {
    color: var(--text-accent);
    text-decoration: underline;
  }

  .social-icons {
    display: flex;
    gap: 0.5em;
    padding-left: 1.7em;
  }

  .kebab-menu {
    position: relative;
    margin-left: 0.5em;
  }

  .kebab-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5em;
    color: var(--icon-color);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .kebab-button:hover {
    opacity: 0.7;
  }

  .kebab-dots {
    display: flex;
    flex-direction: column;
    gap: 2px;
    align-items: center;
  }

  .dot {
    width: 4px;
    height: 4px;
    background: currentColor;
    border-radius: 50%;
  }

  .kebab-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    background: var(--background);
    border: 1px solid var(--text-secondary);
    border-radius: 6px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    min-width: 160px;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all 0.2s ease;
    overflow: hidden;
  }

  .kebab-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .kebab-dropdown a,
  .kebab-dropdown button {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    color: var(--text-main);
    text-decoration: none;
    font-family: var(--font-family-sans);
    font-size: 0.875rem;
    border: none;
    background: none;
    cursor: pointer;
    text-align: left;
    transition: background-color 0.15s ease;
    white-space: nowrap;
  }

  .kebab-dropdown a:hover,
  .kebab-dropdown button:hover {
    background: var(--background-body);
  }

  .kebab-dropdown .divider {
    height: 1px;
    background: var(--text-secondary);
    margin: 0;
    opacity: 0.2;
  }

  .user-badge {
    padding: 0.75rem 1rem;
    font-family: var(--font-family-sans);
    font-size: 0.8rem;
    color: var(--text-secondary);
    background: var(--background-body);
    font-weight: 500;
    border-bottom: 1px solid var(--text-secondary);
    opacity: 0.8;
  }

  .user-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-family-sans);
    font-size: 0.875rem;
    color: var(--text-main);
  }

  .user-indicator {
    padding: 0.25rem 0.5rem;
    background: var(--background-body);
    border: 1px solid var(--text-secondary);
    border-radius: 4px;
    font-size: 0.75rem;
  }

  @media screen and (max-width: 520px) {
    header {
      padding: 2em 0;
    }
  }
</style>

<header>
  <div class="logo-title">
    <Logo />
    <div>
      <a href="/" class="site-title">Emily Cogsdill</a>
      <div class="site-subheader" id="subtitle" set:html={subtitleHTML}></div>
    </div>
  </div>
  <Nav current={current} />
  <div class="social-icons">
    <div class="kebab-menu">
      <button class="kebab-button" id="kebab-toggle" aria-label="Account menu">
        <div class="kebab-dots">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
      </button>
      <div class="kebab-dropdown" id="kebab-dropdown">
        <!-- Server-side rendered menu -->
        <div id="server-menu">
          {user ? (
            <>
              <button id="logout-btn">Logout</button>
            </>
          ) : (
            <>
              <a href="/login">Login</a>
              <a href="/signup">Sign Up</a>
            </>
          )}
        </div>
        <!-- Client-side menu (hidden by default, replaces server menu via JS) -->
        <div id="client-menu" style="display: none;">
          <div id="logged-in-menu" style="display: none;">
            <div class="user-badge" id="client-user-badge"></div>
            <button id="client-logout-btn">Logout</button>
          </div>
          <div id="logged-out-menu" style="display: none;">
            <a href="/login">Login</a>
            <a href="/signup">Sign Up</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script define:vars={{ subtitlesData }}>
  // Client-side subtitle randomization - runs immediately on every page load
  function randomizeSubtitle() {
    const subtitles = JSON.parse(`${JSON.stringify(subtitlesData.subtitles)}`);
    const randomIndex = Math.floor(Math.random() * subtitles.length);
    const selectedSubtitle = subtitles[randomIndex];
    
    // Use the same renderSubtitleHTML function logic as remote
    let html = selectedSubtitle.text;
    selectedSubtitle.links.forEach(link => {
      const linkHTML = `<a href="${link.url}"${link.target ? ` target="${link.target}"` : ''}>${link.text}</a>`;
      html = html.replace(link.text, linkHTML);
    });
    
    const subtitleElement = document.getElementById('subtitle');
    if (subtitleElement) {
      subtitleElement.innerHTML = html;
    }
  }

  // Randomize subtitle immediately and on every page load/refresh
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', randomizeSubtitle);
  } else {
    randomizeSubtitle();
  }
  
  // Main functionality - runs after DOM is ready
  document.addEventListener('DOMContentLoaded', async () => {
    // Check authentication status via API
    let currentUser = null;
    try {
      const response = await fetch('/api/auth/status');
      const authStatus = await response.json();
      currentUser = authStatus.user;
      
      // Update UI based on auth status
      updateAuthUI(currentUser);
    } catch (error) {
      console.warn('Auth check failed:', error);
    }

    function updateAuthUI(user) {
      const serverMenu = document.getElementById('server-menu');
      const clientMenu = document.getElementById('client-menu');
      const clientUserBadge = document.getElementById('client-user-badge');
      const loggedInMenu = document.getElementById('logged-in-menu');
      const loggedOutMenu = document.getElementById('logged-out-menu');

      if (user) {
        // User is logged in
        if (clientUserBadge) {
          clientUserBadge.textContent = `@${user.username}`;
        }
        if (loggedInMenu) loggedInMenu.style.display = 'block';
        if (loggedOutMenu) loggedOutMenu.style.display = 'none';
      } else {
        // User is not logged in
        if (loggedInMenu) loggedInMenu.style.display = 'none';
        if (loggedOutMenu) loggedOutMenu.style.display = 'block';
      }

      // Switch to client-side menu
      if (serverMenu) serverMenu.style.display = 'none';
      if (clientMenu) clientMenu.style.display = 'block';
    }

    // Kebab menu toggle - with improved event handling
    const kebabToggle = document.getElementById('kebab-toggle');
    const kebabDropdown = document.getElementById('kebab-dropdown');
    
    if (kebabToggle && kebabDropdown) {
      // Remove any existing event listeners to prevent duplicates
      const newKebabToggle = kebabToggle.cloneNode(true);
      kebabToggle.parentNode.replaceChild(newKebabToggle, kebabToggle);
      
      // Add click event listener to the new element
      newKebabToggle.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        kebabDropdown.classList.toggle('show');
        console.log('Kebab menu toggled:', kebabDropdown.classList.contains('show'));
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (e.target && e.target instanceof Element) {
          const isClickInsideToggle = newKebabToggle.contains(e.target);
          const isClickInsideDropdown = kebabDropdown.contains(e.target);
          
          if (!isClickInsideToggle && !isClickInsideDropdown && kebabDropdown.classList.contains('show')) {
            kebabDropdown.classList.remove('show');
            console.log('Kebab menu closed - clicked outside');
          }
        }
      });

      // Close menu on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && kebabDropdown.classList.contains('show')) {
          kebabDropdown.classList.remove('show');
          console.log('Kebab menu closed - escape key');
        }
      });
    } else {
      console.error('Kebab menu elements not found:', { kebabToggle, kebabDropdown });
    }

    // Logout functionality for both server and client buttons
    function setupLogoutButton(buttonId) {
      const logoutBtn = document.getElementById(buttonId);
      if (logoutBtn) {
        logoutBtn.addEventListener('click', async (e) => {
          e.preventDefault();
          const confirmed = confirm('Are you sure you want to logout?');
          if (!confirmed) return;
          
          try {
            await fetch('/api/auth/logout', { method: 'POST' });
            // Update UI immediately
            updateAuthUI(null);
            // Redirect to home
            window.location.href = '/';
          } catch (error) {
            console.error('Logout failed:', error);
          }
        });
      }
    }

    setupLogoutButton('logout-btn');
    setupLogoutButton('client-logout-btn');

  });
</script>
