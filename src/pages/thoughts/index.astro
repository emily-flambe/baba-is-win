---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Carousel from '../../components/Carousel.astro';
import PremiumContentIndicator from '../../components/PremiumContentIndicator.astro';
import { processSimpleMarkdown } from '../../utils/simpleMarkdown.js';
import { processContentForDisplay } from '../../utils/contentProcessing';

const title = 'Thoughts';
const description = 'Quick thoughts and musings - my personal micro-blog.';
const permalink = `${Astro.site.href}thoughts`;

const thoughtModules = import.meta.glob('../../data/thoughts/published/*.md', { eager: true });
let allThoughts = Object.entries(thoughtModules).map(([path, module]) => ({
  ...module,
  file: path
}));
allThoughts = allThoughts.sort((a, b) => {
  const dateA = new Date(`${a.frontmatter.publishDate} ${a.frontmatter.publishTime}`);
  const dateB = new Date(`${b.frontmatter.publishDate} ${b.frontmatter.publishTime}`);
  return dateB.valueOf() - dateA.valueOf();
});

// Group thoughts by date
const thoughtsByDate = allThoughts.reduce((acc, thought) => {
  const date = thought.frontmatter.publishDate;
  if (!acc[date]) {
    acc[date] = [];
  }
  acc[date].push(thought);
  return acc;
}, {});

// Get current user for premium content handling
const user = Astro.locals?.user || null;
---

<BaseLayout title={title} description={description} permalink={permalink} current="thoughts">
  <div class="container">
    <p class="intro">GET OFF MY LAWN</p>
    
    <div class="thoughts-container">
      {Object.entries(thoughtsByDate).map(([date, thoughts]) => (
        <div class="date-group">
          <h2 class="date-header">{date}</h2>
          {thoughts.map((thought) => {
            const href = `/thoughts/${thought.file.split('/').pop().split('.').shift()}`;
            const bgColor = thought.frontmatter.color || 'var(--background-body)';
            const isPremium = thought.frontmatter.premium === true;
            
            // Process content for display in listing
            const contentData = processContentForDisplay(
              thought.frontmatter.content,
              thought.frontmatter,
              user,
              'thought'
            );
            
            return (
              <article class="thought-card" style={`background-color: ${bgColor};`}>
                <a href={href} class="thought-link">
                  <div class="thought-content">
                    <p set:html={processSimpleMarkdown(contentData.content)}></p>
                    {contentData.isTruncated && (
                      <div class="read-more-indicator">
                        <span>Continue reading â†’</span>
                      </div>
                    )}
                    {thought.frontmatter.images && thought.frontmatter.images.length > 0 && (
                      <Carousel images={thought.frontmatter.images} alt="Thought image" size="large" />
                    )}
                  </div>
                </a>
                <div class="thought-meta">
                  <div class="thought-meta-left">
                    <time>{thought.frontmatter.publishTime}</time>
                    {isPremium && (
                      <PremiumContentIndicator 
                        isPremium={true}
                        requiresAuth={contentData.requiresAuth}
                        isTruncated={contentData.isTruncated}
                      />
                    )}
                  </div>
                  {thought.frontmatter.tags && thought.frontmatter.tags.length > 0 && (
                    <span class="tags">
                      {thought.frontmatter.tags.map((tag, index) => (
                        <>
                          {index > 0 && ' '}
                          <span class="tag">#{tag}</span>
                        </>
                      ))}
                    </span>
                  )}
                </div>
              </article>
            );
          })}
        </div>
      ))}
    </div>
  </div>
</BaseLayout>

<style>
  .intro {
    color: var(--text-secondary);
    font-style: italic;
    margin-bottom: 3rem;
  }

  .thoughts-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .date-group {
    margin-bottom: 3rem;
  }

  .date-header {
    font-family: var(--font-family-sans);
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--primary-color);
  }

  .thought-card {
    border: 1px solid var(--text-secondary);
    border-radius: 8px;
    margin-bottom: 1rem;
    transition: all 0.2s ease;
    position: relative;
  }

  .thought-card:hover {
    border-color: var(--primary-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .thought-link {
    display: block;
    text-decoration: none;
    color: inherit;
    padding: 1.5rem;
  }

  .thought-link:hover {
    text-decoration: none;
  }

  .thought-content {
    margin-bottom: 1rem;
  }

  .thought-content p {
    font-size: 0.9rem;
    line-height: 1.6;
    margin: 0;
  }
  
  .thought-content strong {
    font-weight: 600;
  }
  
  .thought-content em {
    font-style: italic;
  }
  
  .thought-content code {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.125rem 0.25rem;
    border-radius: 3px;
    font-size: 0.85em;
    font-family: monospace;
  }

  .thought-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }

  .thought-meta-left {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .read-more-indicator {
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .read-more-indicator span {
    color: var(--primary-color);
    font-size: 0.85rem;
    font-weight: 500;
    font-style: italic;
  }

  .thought-meta time {
    font-family: var(--font-family-sans);
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .tag {
    color: var(--primary-color);
    font-family: var(--font-family-sans);
    font-size: 0.8rem;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .tag:hover {
    opacity: 1;
  }

  @media (max-width: 600px) {
    .thought-link {
      padding: 1rem;
    }

    .thought-content p {
      font-size: 1rem;
    }

    .thought-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .thought-meta-left {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>