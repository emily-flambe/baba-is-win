---
import MuseumLayout from '../../components/museum/MuseumLayout.astro';
import MuseumGallery from '../../components/museum/MuseumGallery.astro';
import MuseumFilters from '../../components/museum/MuseumFilters.svelte';
import { generateMuseumData } from '../../lib/github/api.js';
import type { MuseumData } from '../../lib/github/types.js';

// For static generation, we can use the pre-generated data
// or fetch fresh data during build time
let museumData: MuseumData;

try {
  // Try to fetch fresh data during build
  museumData = await generateMuseumData('emily-flambe');
} catch (error) {
  console.warn('Failed to fetch fresh GitHub data, using fallback:', error);
  // Fallback is handled internally by generateMuseumData
  museumData = {
    lastUpdated: new Date().toISOString(),
    projects: [],
    categories: [],
    languages: [],
    totalProjects: 0
  };
}

const { projects, categories, languages, totalProjects, lastUpdated } = museumData;

const pageTitle = "Project Museum | Emily's GitHub Projects";
const pageDescription = "A curated digital museum showcasing coding projects and creative works. Explore an interactive gallery of tools, applications, and innovations crafted with passion and precision.";

// SEO and social sharing data
const ogImage = "/assets/social.png"; // Use existing social image
const keywords = [
  'GitHub projects',
  'open source',
  'Emily Flambe',
  'TypeScript',
  'JavaScript',
  'Python',
  'productivity tools',
  'web development',
  'portfolio'
].join(', ');
---

<MuseumLayout title={pageTitle} description={pageDescription}>
  <Fragment slot="header">
    <div class="museum-hero">
      <div class="bouncing-emojis">
        <span class="emoji emoji-1">üèõÔ∏è</span>
        <span class="emoji emoji-2">üè∫</span>
        <span class="emoji emoji-3">üñºÔ∏è</span>
        <span class="emoji emoji-4">üìö</span>
        <span class="emoji emoji-5">üé®</span>
        <span class="emoji emoji-6">‚ö°</span>
      </div>
      <h1 class="hero-title">Project Museum</h1>
      <p class="hero-description">
        A curated digital collection showcasing coding projects and creative works. 
        Each piece represents a journey of learning, building, and problem-solving 
        in the ever-evolving landscape of software development.
      </p>
    </div>
  </Fragment>
  
  
  <MuseumGallery 
    projects={projects} 
    layout="grid"
    showSearch={false}
    emptyMessage="No projects match your current filters. Try adjusting your selection."
  />
</MuseumLayout>

<!-- Enhanced SEO and Social Sharing -->
<Fragment slot="head">
  <meta name="keywords" content={keywords} />
  <meta name="author" content="Emily Flambe" />
  <meta name="robots" content="index, follow" />
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={pageDescription} />
  <meta property="og:image" content={ogImage} />
  <meta property="og:site_name" content="Emily Flambe" />
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={pageTitle} />
  <meta name="twitter:description" content={pageDescription} />
  <meta name="twitter:image" content={ogImage} />
  
  <!-- Structured Data for SEO -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "CollectionPage",
      "name": pageTitle,
      "description": pageDescription,
      "url": Astro.url.href,
      "author": {
        "@type": "Person",
        "name": "Emily Flambe",
        "url": "https://github.com/emily-flambe"
      },
      "mainEntity": {
        "@type": "ItemList",
        "numberOfItems": totalProjects,
        "itemListElement": projects.map((project, index) => ({
          "@type": "SoftwareSourceCode",
          "position": index + 1,
          "name": project.displayName,
          "description": project.description,
          "codeRepository": project.githubUrl,
          "programmingLanguage": project.language,
          "keywords": project.topics.join(', ')
        }))
      }
    })}
  </script>
</Fragment>

<style>
  /* Museum Hero Section */
  .museum-hero {
    text-align: center;
    max-width: 900px;
    margin: 0 auto;
    padding: var(--museum-space-2xl) 0;
  }

  .bouncing-emojis {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--museum-space-lg);
    margin-bottom: var(--museum-space-2xl);
    font-size: 3.5rem;
  }

  .emoji {
    display: inline-block;
    animation-name: float;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
  }

  .emoji-1 {
    animation-duration: 2.5s;
    animation-delay: 0s;
  }

  .emoji-2 {
    animation-duration: 3s;
    animation-delay: 0.4s;
  }

  .emoji-3 {
    animation-duration: 2.8s;
    animation-delay: 0.8s;
  }

  .emoji-4 {
    animation-duration: 3.2s;
    animation-delay: 0.2s;
  }

  .emoji-5 {
    animation-duration: 2.7s;
    animation-delay: 0.6s;
  }

  .emoji-6 {
    animation-duration: 2.9s;
    animation-delay: 1s;
  }

  @keyframes float {
    0%, 100% { 
      transform: translateY(0px);
    }
    50% { 
      transform: translateY(-10px);
    }
  }

  .hero-title {
    font-size: var(--museum-text-5xl);
    font-weight: 800;
    color: var(--museum-text);
    margin: 0 0 var(--museum-space-xl) 0;
    line-height: 1.1;
    letter-spacing: -0.025em;
  }

  .hero-description {
    font-size: var(--museum-text-lg);
    line-height: 1.7;
    color: var(--museum-muted);
    margin: 0 auto var(--museum-space-2xl) auto;
    max-width: 700px;
    font-weight: 400;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .museum-hero {
      padding: var(--museum-space-xl) 0;
    }

    .bouncing-emojis {
      gap: var(--museum-space-md);
      font-size: 2.5rem;
      margin-bottom: var(--museum-space-xl);
    }

    .hero-title {
      font-size: var(--museum-text-4xl);
    }

    .hero-description {
      font-size: var(--museum-text-base);
      padding: 0 var(--museum-space-md);
    }
  }

  @media (max-width: 480px) {
    .bouncing-emojis {
      gap: var(--museum-space-sm);
      font-size: 2rem;
      flex-wrap: wrap;
    }

    .hero-title {
      font-size: var(--museum-text-3xl);
    }

    .hero-description {
      font-size: var(--museum-text-sm);
      line-height: 1.6;
    }
  }

  /* Accessibility and Motion Preferences */
  @media (prefers-reduced-motion: reduce) {
    .emoji {
      animation: none;
    }
  }

  /* High Contrast Support */
  @media (prefers-contrast: high) {
    .hero-title {
      color: var(--museum-text);
    }
    
    .hero-description {
      color: var(--museum-text);
    }
  }

  /* Dark Theme Adjustments */
  @media (prefers-color-scheme: dark) {
    .hero-title {
      color: var(--museum-secondary);
    }
  }
</style>