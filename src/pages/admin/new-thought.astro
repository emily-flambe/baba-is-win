---
import BaseLayout from '../../layouts/BaseLayout.astro';

const title = 'New Thought';
const description = 'Create a new thought';
const permalink = `${Astro.site.href}admin/new-thought`;
---

<BaseLayout title={title} description={description} permalink={permalink}>
  <div class="container">
    <h1>Create New Thought</h1>
    <form id="thought-form">
      <div class="form-group">
        <label for="content">Thought</label>
        <textarea 
          id="content" 
          name="content" 
          rows="4" 
          maxlength="280"
          placeholder="What's on your mind? (280 chars max)"
          required
        ></textarea>
        <div class="char-count">
          <span id="char-current">0</span> / 280
        </div>
      </div>
      
      <div class="form-group">
        <label for="tags">Tags (comma separated)</label>
        <input 
          type="text" 
          id="tags" 
          name="tags" 
          placeholder="coffee, coding, life"
        />
      </div>
      
      <div class="form-group">
        <label for="images">Images (URLs, one per line)</label>
        <textarea 
          id="images" 
          name="images" 
          rows="4" 
          placeholder="https://example.com/image1.jpg&#10;https://example.com/image2.jpg&#10;/assets/blog/photo.jpg|30%&#10;/assets/blog/portrait.jpg|80%"
        ></textarea>
        <div class="form-hint">
          Enter image URLs, one per line. Add |offset% to control vertical position (e.g., |20% for top, |80% for bottom). Default is 50% (center).
        </div>
      </div>
      
      <button type="submit">Generate Markdown</button>
    </form>
    
    <div id="output" class="output hidden">
      <h2>Generated Markdown</h2>
      <pre><code id="markdown-output"></code></pre>
      <button id="copy-btn">Copy to Clipboard</button>
    </div>
    
    <div class="instructions">
      <h3>Instructions:</h3>
      <ol>
        <li>Fill out the form above</li>
        <li>Click "Generate Markdown"</li>
        <li>Copy the generated markdown</li>
        <li>Create a new file in <code>src/data/thoughts/published/</code></li>
        <li>Name it <code>YYYYMMDD-short-slug.md</code></li>
        <li>Paste the markdown content and save</li>
      </ol>
    </div>
  </div>
</BaseLayout>

<style>
  .container {
    max-width: 600px;
    margin: 0 auto;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    font-family: var(--font-family-sans);
  }

  textarea, input[type="text"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--text-secondary);
    border-radius: 4px;
    font-family: var(--font-family-serif);
    font-size: 1rem;
    background: var(--background-body);
    color: var(--text-main);
  }

  textarea {
    resize: vertical;
    min-height: 100px;
  }

  .char-count {
    text-align: right;
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
    font-family: var(--font-family-sans);
  }

  button {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-family: var(--font-family-sans);
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  button:hover {
    opacity: 0.9;
  }

  .output {
    margin-top: 2rem;
    padding: 1.5rem;
    background: var(--background);
    border: 1px solid var(--text-secondary);
    border-radius: 4px;
  }

  .output.hidden {
    display: none;
  }

  .output h2 {
    margin-top: 0;
    font-family: var(--font-family-sans);
  }

  pre {
    background: var(--background-body);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
  }

  code {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
  }

  .instructions {
    margin-top: 3rem;
    padding: 1.5rem;
    background: var(--background);
    border-radius: 4px;
  }

  .instructions h3 {
    margin-top: 0;
    font-family: var(--font-family-sans);
  }

  .instructions ol {
    margin-bottom: 0;
  }

  .instructions code {
    background: var(--background-body);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
  }

  .form-hint {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
    font-family: var(--font-family-sans);
  }
</style>

<script>
  const contentInput = document.getElementById('content') as HTMLTextAreaElement;
  const charCurrent = document.getElementById('char-current');
  const form = document.getElementById('thought-form') as HTMLFormElement;
  const output = document.getElementById('output');
  const markdownOutput = document.getElementById('markdown-output');
  const copyBtn = document.getElementById('copy-btn');

  // Character counter
  contentInput.addEventListener('input', () => {
    if (charCurrent) {
      charCurrent.textContent = contentInput.value.length.toString();
    }
  });

  // Form submission
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const content = contentInput.value.trim();
    const tagsInput = (document.getElementById('tags') as HTMLInputElement).value;
    const tags = tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);
    
    const imagesInput = (document.getElementById('images') as HTMLTextAreaElement).value;
    const images = imagesInput.split('\n')
      .map(line => line.trim())
      .filter(line => line)
      .map(line => {
        if (line.includes('|')) {
          const [url, offset] = line.split('|');
          return { url: url.trim(), offset: offset.trim() };
        }
        return line;
      });
    
    const now = new Date();
    const publishDate = now.toLocaleDateString('en-US', { 
      day: 'numeric', 
      month: 'short', 
      year: 'numeric' 
    });
    const publishTime = now.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
    
    const markdown = `---
content: ${content}
publishDate: ${publishDate}
publishTime: ${publishTime}
tags: ${JSON.stringify(tags)}
images: ${JSON.stringify(images)}
---`;
    
    if (markdownOutput) {
      markdownOutput.textContent = markdown;
    }
    
    if (output) {
      output.classList.remove('hidden');
    }
  });

  // Copy to clipboard
  copyBtn?.addEventListener('click', () => {
    if (markdownOutput) {
      navigator.clipboard.writeText(markdownOutput.textContent || '');
      copyBtn.textContent = 'Copied!';
      setTimeout(() => {
        copyBtn.textContent = 'Copy to Clipboard';
      }, 2000);
    }
  });
</script>