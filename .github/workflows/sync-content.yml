name: Sync Content to Database

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all content (even if unchanged)'
        required: false
        type: boolean
        default: false

jobs:
  sync-content:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: Install wrangler
        run: npm install -g wrangler
      
      - name: Ensure database schema is up to date
        run: |
          echo "🗄️ Ensuring content_items table exists..."
          # Create table if it doesn't exist (idempotent)
          wrangler d1 execute baba-is-win-db --file migrations/0006_add_content_tracking.sql || true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Sync content to database
        run: |
          echo "🔍 Scanning filesystem for content..."
          
          # Get existing slugs from database
          echo "📊 Getting existing slugs from database..."
          raw_response=$(wrangler d1 execute baba-is-win-db --command "SELECT slug FROM content_items;" --json)
          echo "Raw response from D1:"
          echo "$raw_response" | jq . || echo "$raw_response"
          
          # Try different response formats - D1 might return results in different structures
          existing_slugs=$(echo "$raw_response" | jq -r 'try .results[].slug // try .[].slug // empty' 2>/dev/null | sort | uniq)
          
          if [ -z "$existing_slugs" ]; then
            echo "No existing content found in database (or unable to parse response)"
            existing_slugs=""
          else
            echo "Existing slugs found:"
            echo "$existing_slugs"
          fi
          
          # Collect all filesystem content first
          echo "📝 Scanning filesystem for all content..."
          blog_files=(src/data/blog-posts/published/*.md)
          thought_files=(src/data/thoughts/published/*.md)
          
          new_content_count=0
          
          # Process blog posts
          echo "📝 Processing blog posts..."
          for blog_file in "${blog_files[@]}"; do
            if [ -f "$blog_file" ]; then
              slug=$(basename "$blog_file" .md)
              
              # Check if slug already exists (handle empty existing_slugs)
              if [ -z "$existing_slugs" ] || ! echo "$existing_slugs" | grep -q "^$slug$"; then
                echo "➕ Adding new blog post: $slug"
                
                # Extract metadata from file and escape single quotes
                title=$(grep "^title:" "$blog_file" | sed 's/title: *//' | sed 's/^"//' | sed 's/"$//' | sed "s/'/''/g")
                description=$(grep "^description:" "$blog_file" | sed 's/description: *//' | sed 's/^"//' | sed 's/"$//' | sed "s/'/''/g")
                publish_date=$(grep "^publishDate:" "$blog_file" | sed 's/publishDate: *//')
                
                # Convert date to Unix timestamp
                publish_timestamp=$(date -d "$publish_date" +%s 2>/dev/null || date -j -f "%d %b %Y" "$publish_date" +%s 2>/dev/null || echo "0")
                
                # Insert into database with properly escaped values
                wrangler d1 execute baba-is-win-db --command "
                  INSERT INTO content_items (slug, content_type, title, description, publish_date, file_path, notification_sent, created_at)
                  VALUES ('$slug', 'blog', '$title', '$description', $publish_timestamp, '$blog_file', 0, datetime('now'));
                "
                ((new_content_count++))
              else
                echo "✅ Blog post already exists: $slug"
              fi
            fi
          done
          
          # Process thoughts
          echo "💭 Processing thoughts..."
          for thought_file in "${thought_files[@]}"; do
            if [ -f "$thought_file" ]; then
              slug=$(basename "$thought_file" .md)
              
              # Check if slug already exists (handle empty existing_slugs)
              if [ -z "$existing_slugs" ] || ! echo "$existing_slugs" | grep -q "^$slug$"; then
                echo "➕ Adding new thought: $slug"
                
                # Extract metadata from file and escape single quotes
                title=$(grep "^title:" "$thought_file" | sed 's/title: *//' | sed 's/^"//' | sed 's/"$//' | sed "s/'/''/g")
                publish_date=$(grep "^publishDate:" "$thought_file" | sed 's/publishDate: *//')
                
                # Convert date to Unix timestamp
                publish_timestamp=$(date -d "$publish_date" +%s 2>/dev/null || date -j -f "%d %b %Y" "$publish_date" +%s 2>/dev/null || echo "0")
                
                # Insert into database with properly escaped values
                wrangler d1 execute baba-is-win-db --command "
                  INSERT INTO content_items (slug, content_type, title, publish_date, file_path, notification_sent, created_at)
                  VALUES ('$slug', 'thought', '$title', $publish_timestamp, '$thought_file', 0, datetime('now'));
                "
                ((new_content_count++))
              else
                echo "✅ Thought already exists: $slug"
              fi
            fi
          done
          
          echo "📊 Summary: Added $new_content_count new content items"
          
          echo "✅ Content sync completed successfully"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Check content status after sync
        run: |
          echo ""
          echo "Checking content and notification status after sync..."
          
          curl -X GET https://personal.emily-cogsdill.workers.dev/api/admin/check-notifications \
            -H "x-cron-secret: ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            | jq '{
              summary,
              unnotifiedContent: .unnotifiedContent | map({slug, type, title, isNotified}),
              totalUnnotified: .unnotifiedContent | length
            }'
      
      - name: Show sync summary
        run: |
          echo ""
          echo "=== SYNC SUMMARY ==="
          echo "1. Content has been synced from markdown files to database"
          echo "2. Check the unnotifiedContent above to see what needs notification"
          echo "3. To send notifications, use the 'Process Email Notifications' workflow"
          echo "4. To force re-notification of content, use the 'Reset Notifications' workflow first"