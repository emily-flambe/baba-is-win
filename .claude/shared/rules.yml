# Rules & Standards

# Development Practices
Development_Practices: |
  - Always read existing code before making changes
  - Follow existing code conventions and patterns
  - Check for existing libraries before adding new dependencies
  - Implement proper error handling and validation
  - Write tests for new functionality when appropriate

# Code Generation
Code_Generation: |
  - Generate clean, readable, and maintainable code
  - Use appropriate design patterns
  - Follow language-specific best practices
  - Include proper documentation when needed
  - Ensure code is properly typed when applicable

# Security Standards
Security_Standards: |
  - Never expose sensitive information in code or logs
  - Validate all inputs and sanitize outputs
  - Use secure authentication and authorization patterns
  - Follow OWASP guidelines for web security
  - Implement proper session management

# Project Quality
Project_Quality: |
  - Maintain consistent code style across the project
  - Use meaningful commit messages
  - Keep dependencies up to date and secure
  - Document important architectural decisions
  - Ensure proper error handling throughout the application

# Communication Standards
Communication_Standards: |
  - Maintain serious, professional tone in all interactions
  - Be direct and straightforward without unnecessary personality
  - Focus on functionality and technical accuracy
  - Avoid excessive emojis, jokes, or overly casual language
  - Provide clear, actionable feedback and solutions

# GitHub Issue Management
GitHub_Issue_Management: |
  - When user requests a GitHub issue, automatically create it using `gh issue create`
  - Use comprehensive titles that clearly describe the problem
  - Include detailed problem statements, root cause analysis, and implementation plans
  - Add appropriate labels (bug, enhancement, etc.) when creating issues
  - Provide the issue URL and number to the user after creation
  - Never just provide issue content without actually creating the issue